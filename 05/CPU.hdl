// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Central Processing unit (CPU).
 * Consists of an ALU and a set of registers, designed to fetch and 
 * execute instructions written in the Hack machine language.
 * In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM=0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time unit. If reset=1 then the 
 * CPU jumps to address 0 (i.e. sets pc=0 in next time unit) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset=1) or continue executing
                         // the current program (reset=0).

    OUT outM[16],        // M value output
        writeM,          // Write into M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:
	And(a = instruction[15], b = instruction[5], out = andout);
	Mux16(a = instruction, b = ALUout, sel = andout, out = out1);
	And16(a = out1, b[15] = false, b[0..14] = true, out = out2);
	Not(in = instruction[15], out = outins);
	Or(a = outins, b = andout, out = loadA);
	ARegister(in = out2, load = loadA, out = outA, out[0..14] = addressM);
	
	And(a = instruction[15], b = instruction[12], out = selAM);
	Mux16(a = outA, b = inM, sel = selAM, out = outAM);
	
	And(a = instruction[15], b = instruction[4], out = loadD);
	DRegister(in = ALUout, load = loadD, out = outD);
	
	And(a = instruction[15], b = instruction[11], out = outzx);
	And(a = instruction[15], b = instruction[10], out = outnx);
	And(a = instruction[15], b = instruction[9], out = outzy);
	And(a = instruction[15], b = instruction[8], out = outny);
	And(a = instruction[15], b = instruction[7], out = outf);
	And(a = instruction[15], b = instruction[6], out = outno);
	ALU(x = outD, y = outAM, zx = outzx, nx = outnx, zy = outzy, ny = outny, f = outf, no = outno, out = ALUout, out = outM, zr = ALUzr, ng = ALUng);
	
	Not(in = ALUng, out = notng);
	And(a = outNE, b = notng, out = outGT);
	Or(a = outGT, b = ALUzr, out = outGE);
	Not(in = ALUzr, out = outNE);
	Or(a = ALUng, b = ALUzr, out = outLE);
	Mux8Way(a = false, b = outGT, c = ALUzr, d = outGE, e = ALUng, f = outNE, g = outLE, h = true, sel[0..2] = instruction[0..2], out = out8way);
	And(a = out8way, b = instruction[15], out = loadpc);
	
	Not(in = reset, out = notreset);
	Not(in = loadpc, out = notloadpc);
	And(a = notreset, b = notloadpc, out = outinc);
	PC(in = outA, load = loadpc, inc = outinc, reset = reset, out[0..14] = pc);
	
	And(a = instruction[15], b = instruction[3], out = outwrM);
	And(a = outwrM, b = outwrM, out = writeM);
}